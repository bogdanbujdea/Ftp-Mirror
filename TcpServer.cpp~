/*
    <one line to give the program's name and a brief idea of what it does.>
    Copyright (C) 2012  <copyright holder> <email>

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License along
    with this program; if not, write to the Free Software Foundation, Inc.,
    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
*/


#include "TcpServer.h"

TcpServer::TcpServer()
{

}

int TcpServer::WaitForClients()
{
    int new_Socket;
    socklen_t clilen;
    char buffer[256];
    struct sockaddr_in serv_addr, cli_addr;
    int n;
    _Socket = socket(AF_INET, SOCK_STREAM, 0);
    if (_Socket < 0)
    {
        cout << "ERROR opening socket" << endl;
        return -1;
    }
    bzero((char *) &serv_addr, sizeof(serv_addr));
    serv_addr.sin_family = AF_INET;
    serv_addr.sin_addr.s_addr = INADDR_ANY;
    serv_addr.sin_port = htons(_port);
    if (bind(_Socket, (struct sockaddr *) &serv_addr,
             sizeof(serv_addr)) < 0)
    {
      cout << "ERROR on binding" << endl;
      return -1;
    }
    listen(_Socket,5);
    clilen = sizeof(cli_addr);
    new_Socket = accept(_Socket,
                        (struct sockaddr *) &cli_addr,
                        &clilen);
    if (new_Socket < 0)
    {
        cout << "ERROR on accept" << endl;
        return new_Socket;
    }

}

TcpServer::TcpServer(const TcpServer& other)
{

}

TcpServer::~TcpServer()
{

}

TcpServer& TcpServer::operator=(const TcpServer& other)
{
    return *this;
}

bool TcpServer::operator==(const TcpServer& other) const
{
///TODO: return ...;
}

